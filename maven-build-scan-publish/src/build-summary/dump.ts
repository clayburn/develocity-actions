import path from 'path'
import * as core from '@actions/core'

import * as githubUtils from '../utils/github'
import * as input from '../utils/input'
import * as io from '../utils/io'
import * as layout from '../utils/layout'
import {BuildArtifact, BuildMetadata} from '../data/load'

const BUILD_SCAN_LINK_FILE = 'build-scan-links.properties'
const DUMP_FILENAME = 'build-metadata.json'

export async function dump(buildArtifact: BuildArtifact): Promise<void> {
    updateBuildScanLinks(buildArtifact.builds)

    if (buildArtifact.builds.length > 0) {
        if (input.isSkipComment()) {
            dumpToFile(buildArtifact)
        } else {
            await commentPullRequestWithBuildSummary(buildArtifact)
        }
    }
}

function updateBuildScanLinks(buildMetadata: BuildMetadata[]): void {
    const buildScanLinks = io.readFileSync(path.resolve(layout.home(), BUILD_SCAN_LINK_FILE))
    if (buildScanLinks) {
        for (const buildScanLinksLine of buildScanLinks.split('\n')) {
            const buildScanLinkData = buildScanLinksLine.split('=')
            if (buildScanLinkData && buildScanLinkData.length === 2) {
                const buildId = buildScanLinkData[0]
                const buildScanLink = buildScanLinkData[1]
                const match = buildMetadata.find(element => element.buildId === buildId)
                if (match) {
                    match.buildScanLink = buildScanLink
                }
            }
        }
    } else {
        core.warning(`Build scan link file not found, build summary will not be dumped`)
    }
}

function dumpToFile(buildArtifact: BuildArtifact): void {
    io.writeContentToFileSync(path.resolve(layout.home(), DUMP_FILENAME), JSON.stringify(buildArtifact))
}

async function commentPullRequestWithBuildSummary(buildArtifact: BuildArtifact): Promise<void> {
    let comment = `#### Explore the Build Scan(s): 
    
        | Job | Goal | Status | Link |
        | --- | --- | --- | --- |
        `

    for (const buildMetadata of buildArtifact.builds) {
        comment += `\
            | ${buildMetadata.jobName} \
            | ${buildMetadata.mavenGoals} \
            | ${buildMetadata.buildFailure ? '❌' : '✅'} \
            | ${buildMetadata.buildScanLink} |
            `
    }

    comment += `    
        ###### Generated by gradle/github-actions/maven-build-scan-publish
        `

    await githubUtils.commentPullRequest(buildArtifact.prNumber, comment.replace(/^\s+/gm, ''))
}
