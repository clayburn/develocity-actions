name: Publish Maven Build Scans
description: Publish Maven Build Scans

inputs:
  develocity-url:
    description: 'Develocity URL'
    required: true
  develocity-access-key:
    description: 'Develocity access key'
    required: false
  develocity-allow-untrusted:
    description: 'Develocity allow-untrusted flag'
    default: 'false'
    required: false
  skip-comment:
    description: 'Do not comment pull-request with publication results if enabled'
    default: 'false'
    required: false
  github-token:
    description: 'The token used for Github API requests'
    default: ${{ github.token }}
    required: false

runs:
  using: 'composite'
  steps:
    - name: Download Build Scans
      uses: dawidd6/action-download-artifact@v2
      env:
        ARTIFACT_NAME: 'maven-build-scan-data'
      with:
        run_id: ${{ github.event.workflow_run.id }}
        name: ${{ env.ARTIFACT_NAME }}
        path: ${{ env.ARTIFACT_NAME }}
    - name: Create Maven Project Structure
      env:
        PROJECT_DIR: 'maven-build-scan-publisher'
      run: |
        mkdir -p ${{ env.PROJECT_DIR }}/.mvn

        cat > ${{ env.PROJECT_DIR }}/pom.xml << EOF
        <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
          <modelVersion>4.0.0</modelVersion>
          <groupId>com.gradle</groupId>
          <artifactId>${{ env.PROJECT_DIR }}</artifactId>
          <version>1.0</version>
          <name>Maven Build Scan Publisher</name>
        </project>
        EOF

        cat > ${{ env.PROJECT_DIR }}/.mvn/extensions.xml.template << EOF
        <?xml version="1.0" encoding="UTF-8"?>
        <extensions>
          <extension>
            <groupId>com.gradle</groupId>
            <artifactId>gradle-enterprise-maven-extension</artifactId>
            <version>REPLACE_ME</version>
          </extension>
        </extensions>
        EOF

        cat > ${{ env.PROJECT_DIR }}/.mvn/gradle-enterprise.xml << EOF
        <?xml version="1.0" encoding="UTF-8" standalone="yes" ?>
        <gradleEnterprise 
          xmlns="https://www.gradle.com/gradle-enterprise-maven" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="https://www.gradle.com/gradle-enterprise-maven https://www.gradle.com/schema/gradle-enterprise-maven.xsd">
          <server>
            <url>${{ inputs.develocity-url }}</url>
            <allowUntrusted>${{ inputs.develocity-allow-untrusted }}</allowUntrusted>
          </server>
        </gradleEnterprise>
        EOF
      shell: bash
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Publish build scan
      env:
        BUILD_SCAN_DIR: '~/.m2/.gradle-enterprise/build-scan-data/'
        GRADLE_ENTERPRISE_ACCESS_KEY: ${{ inputs.develocity-access-key }}
        PROJECT_DIR: 'maven-build-scan-publisher'
        ARTIFACT_DIR: '../maven-build-scan-data'
      working-directory: ${{ env.PROJECT_DIR }}
      id: publish
      run: |
        set +e
        
        prNumber=""
        scanResultsAsMarkdown=""
        scanResultsAsJson=""
        publishedScans=1
        
        scans=$(find ${{ env.ARTIFACT_DIR }} -type f -name "scan.scan")
        nbScans=$(echo "${scans}" | wc -l)

        # iterate over Build Scans
        for scan in ${scans}; do        
          echo "Publishing Build Scan $((publishedScans++))/${nbScans}"

          # assuming directory name is ${{ env.ARTIFACT_NAME }}/<VERSION>/previous/<UUID>/scan.scan
          scanSourceDir=$(dirname ${scan})
          scanId=$(basename ${scanSourceDir})
          currentExtensionVersion=$(basename ${scan%/previous/*})

          # copy scan to maven home
          destDir=${{ env.BUILD_SCAN_DIR }}/${currentExtensionVersion}/previous/${scanId}/
          mkdir -p ${destDir}
          mv ${scanSourceDir}/* ${destDir}

          # load metadata
          metadataFile=$(find ${{ env.BUILD_SCAN_DIR }} -type f -name "build-metadata.properties")
          prNumber=$(cat ${metadataFile} | grep PR_NUMBER | cut -d'=' -f2)
          jobName=$(cat ${metadataFile} | grep JOB_NAME | cut -d'=' -f2)
          jobStatus=$(cat ${metadataFile} | grep JOB_STATUS | cut -d'=' -f2)

          # set current version in project
          sed "s/REPLACE_ME/${currentExtensionVersion}/g" .mvn/extensions.xml.template > .mvn/extensions.xml
             
          # publish build scan
          mvn gradle-enterprise:build-scan-publish-previous | tee build.out

          # remove scan files
          rm -f ${destDir}/*

          # collect build scan link
          scanLink=$(grep -A1 "Publishing build scan..." build.out  | tail -n 1  | sed 's/\[INFO\] //')
          if [[ ! -z "$scanLink" ]]
          then
            scanResultsAsMarkdown="${scanResultsAsMarkdown}| ${jobName} | ${jobStatus} | $scanLink |@SEP@"
            scanResultsAsJson="${scanResultsAsJson} {\"jobName\": \"${jobName}\", \"status\": \"${jobStatus}\", \"buildScanLink\": \"$scanLink\"},"
          fi        
        done

        echo "PR_NUMBER=$prNumber" >> $GITHUB_OUTPUT
        echo "SCAN_RESULTS_AS_MARKDOWN=$scanResultsAsMarkdown" >> $GITHUB_OUTPUT
        echo "SCAN_RESULTS_AS_JSON=$scanResultsAsJson" >> $GITHUB_OUTPUT
      shell: bash
    - name: Comment pull-request with Build Scan links
      if: ${{ inputs.skip-comment != 'true' }}
      uses: actions/github-script@v6
      env:
        PR: ${{ steps.publish.outputs.PR_NUMBER }}
        SCAN_RESULTS: ${{ steps.publish.outputs.SCAN_RESULTS_AS_MARKDOWN }}
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          const prNumber = Number(process.env.PR);
          const scanResults = process.env.SCAN_RESULTS;
          
          if(scanResults.length > 0) {
            const comment = `#### Explore the Build Scan(s): 
  
            | Job | Status | Link |
            | --- | --- | --- |
            ${scanResults
              .replace(/\| success \|/g,'\| ✅ \|')
              .replace(/\| failure \|/g,'\| ❌ \|')
              .replace(/\| cancelled \|/g,'\| ⏹ \|')
              .replace(/@SEP@/g,'\n')
            }
          
            ###### Generated by gradle/github-actions/maven-build-scan/publish`;
          
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
          }
    - name: Dump workflow results in file
      if: ${{ inputs.skip-comment == 'true' }}
      env:
        PUBLICATION_FILE: 'build-metadata.json'
      run: |
        if [ ! -z '${{ steps.publish.outputs.SCAN_RESULTS_AS_JSON }}' ]; then
          SCAN_RESULTS_AS_JSON_WITHOUT_TRAILING_COMMA=$(echo '${{ steps.publish.outputs.SCAN_RESULTS_AS_JSON }}' | sed 's/,$//g')
        
          cat > ${{ env.PUBLICATION_FILE }} << EOF
          {
          "prNumber": ${{ steps.publish.outputs.PR_NUMBER }},
          "builds": [
          ${SCAN_RESULTS_AS_JSON_WITHOUT_TRAILING_COMMA}
          ]
          }
        EOF

          echo "Metadata dumped to ${{ env.PUBLICATION_FILE }}"
        fi
      shell: bash
